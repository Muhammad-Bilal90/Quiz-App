[{"E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\index.tsx":"1","E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\reportWebVitals.ts":"2","E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\App.tsx":"3","E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\Services\\services.ts":"4","E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\Components\\QuestionCard.tsx":"5","E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\Components\\Settings.tsx":"6","E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\Components\\Result.tsx":"7","E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\Types\\types.ts":"8"},{"size":500,"mtime":1623159923010,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1623159923010,"results":"11","hashOfConfig":"10"},{"size":2971,"mtime":1623160330766,"results":"12","hashOfConfig":"10"},{"size":1196,"mtime":1623160320125,"results":"13","hashOfConfig":"10"},{"size":5834,"mtime":1623160303974,"results":"14","hashOfConfig":"10"},{"size":9001,"mtime":1623160312346,"results":"15","hashOfConfig":"10"},{"size":3937,"mtime":1623160308857,"results":"16","hashOfConfig":"10"},{"size":1854,"mtime":1623160325368,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18fbt6h",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\index.tsx",[],"E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\reportWebVitals.ts",[],"E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\App.tsx",[],"E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\Services\\services.ts",[],"E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\Components\\QuestionCard.tsx",["35"],"import React, { useState, useEffect } from \"react\";\r\n// Types\r\nimport { QuestionPropsTypes } from \"./../Types/types\";\r\n// mui\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Box, Radio, RadioGroup, FormControlLabel, FormControl, Typography, Divider, CircularProgress } from \"@material-ui/core\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    QuizStart: {\r\n        height: \"100vh\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        justifyItems: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    quesCard: {\r\n        width: \"90%\",\r\n        boxShadow:\r\n            \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\r\n        margin: \"0 auto\",\r\n        background: \"white\",\r\n        borderRadius: \"0.5rem\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"70%\",\r\n        },\r\n    },\r\n    primaryColor: {\r\n        color: theme.palette.primary.main,\r\n    },\r\n    quesParent: {\r\n        background: theme.palette.primary.main,\r\n        color: \"#f3f3f3\",\r\n        borderRadius: \"0.5rem\",\r\n    },\r\n    loader: {\r\n        position: \"absolute\",\r\n        left: \"50%\",\r\n        top: \"50%\",\r\n        transform: \"translte(-50%,-50%)\",\r\n    },\r\n}));\r\n\r\nconst QuestionCard: React.FC<QuestionPropsTypes> = ({ options, question, answer, username, fetchNumberOfQuestiuons, TotalScore, score, QuestionsCountProps, callback }) => {\r\n\r\n    // declaring states\r\n    const [userAnswer, setUserAnswer] = useState<string>(\"\");\r\n    const [buttonToggle, setButtonToggle] = useState<boolean>(false);\r\n\r\n    // destructuring data\r\n    const { questionCount, setQuestionCount } = QuestionsCountProps;\r\n\r\n    // mui class\r\n    const classes = useStyle();\r\n\r\n    // creating handler for switching to next question and add score if correct answer\r\n    const nextHandler = () => {\r\n        if (answer === userAnswer) {\r\n            TotalScore(score + 1);\r\n            setUserAnswer(\"\");\r\n        }\r\n        if (fetchNumberOfQuestiuons !== questionCount) {\r\n            setQuestionCount(questionCount + 1);\r\n        }\r\n    }\r\n\r\n    // for showing submit at last dependent on questionCount, score and fetchNumberOfQuestions\r\n    useEffect(() => {\r\n        if (fetchNumberOfQuestiuons === questionCount) {\r\n            setButtonToggle(true);\r\n        } else {\r\n            setButtonToggle(false);\r\n        }\r\n    }, [questionCount, score, fetchNumberOfQuestiuons]);\r\n\r\n    return (\r\n\r\n        <div className={classes.QuizStart}>\r\n            <div className={classes.quesCard}>\r\n                <Box py={3} px={4}>\r\n                    <Box px={1}>\r\n                        <Typography variant=\"h6\" style={{ textTransform: \"capitalize\" }}>\r\n                            <b> Student Name : {username} </b>\r\n                        </Typography>\r\n                        <Box py={2} px={1}>\r\n                            <Divider className={classes.primaryColor} />\r\n                        </Box>\r\n                        <Typography variant=\"h5\" color=\"primary\">\r\n                            <b>\r\n                                {/* + 1 for getting question number and fetched questions starting from 1 as array starts from 0 index */}\r\n                                Question {questionCount + 1} of {fetchNumberOfQuestiuons + 1}\r\n                            </b>\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box py={2} px={1}>\r\n                        <Divider className={classes.primaryColor} />\r\n                    </Box>\r\n                    <Box py={3} px={2} className={classes.quesParent}>\r\n                        <Typography variant=\"h5\">\r\n                            {question}\r\n                        </Typography>\r\n                    </Box>\r\n                    <form name=\"settingForm\" onSubmit={callback}>\r\n                        <Box px={1} pt={3}>\r\n                            <FormControl component=\"fieldset\">\r\n                                <RadioGroup aria-label=\"gender\" name=\"gender1\" value={userAnswer}\r\n                                    onChange={(e) => setUserAnswer(e.target.value)}>\r\n                                    {options.map((options: string, ind: number) => (\r\n                                        <FormControlLabel key={ind}\r\n                                            value={options}\r\n                                            control={<Radio color=\"primary\" />}\r\n                                            label={options}\r\n                                            color=\"primary\" />\r\n                                    ))}\r\n                                </RadioGroup>\r\n                                <Box py={2}>\r\n                                    {buttonToggle ? (\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            onClick={nextHandler}\r\n                                            type=\"submit\">\r\n                                            Submit\r\n                                        </Button>\r\n                                    ) : (\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            onClick={nextHandler}\r\n                                            disabled={userAnswer === \"\" ? true : false}\r\n                                        >\r\n                                            Next\r\n                                        </Button>\r\n                                    )}\r\n                                </Box>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </form>\r\n                </Box>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;\r\n","E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\Components\\Settings.tsx",[],"E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\Components\\Result.tsx",[],"E:\\Bilal\\Bootcamp2020\\quiz-app\\src\\Types\\types.ts",[],{"ruleId":"36","severity":1,"message":"37","line":6,"column":94,"nodeType":"38","messageId":"39","endLine":6,"endColumn":110},"@typescript-eslint/no-unused-vars","'CircularProgress' is defined but never used.","Identifier","unusedVar"]