{"ast":null,"code":"var _jsxFileName = \"E:\\\\Bilal\\\\Bootcamp2020\\\\quiz-app\\\\src\\\\Components\\\\QuestionCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // Types\n\n// mui\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Box, Radio, RadioGroup, FormControlLabel, FormControl, Typography, Divider } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyle = makeStyles(theme => ({\n  QuizStart: {\n    height: \"100vh\",\n    width: \"100%\",\n    display: \"flex\",\n    justifyItems: \"center\",\n    alignItems: \"center\"\n  },\n  quesCard: {\n    width: \"90%\",\n    boxShadow: \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\n    margin: \"0 auto\",\n    background: \"white\",\n    borderRadius: \"0.5rem\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"70%\"\n    }\n  },\n  primaryColor: {\n    color: theme.palette.primary.main\n  },\n  quesParent: {\n    background: theme.palette.primary.main,\n    color: \"#f3f3f3\",\n    borderRadius: \"0.5rem\"\n  },\n  loader: {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translte(-50%,-50%)\"\n  }\n}));\n\nconst QuestionCard = ({\n  options,\n  question,\n  answer,\n  username,\n  fetchNumberOfQuestiuons,\n  TotalScore,\n  score,\n  QuestionsCountProps,\n  callback\n}) => {\n  _s();\n\n  // declaring states\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [buttonToggle, setButtonToggle] = useState(false); // destructuring data\n\n  const {\n    questionCount,\n    setQuestionCount\n  } = QuestionsCountProps; // mui class\n\n  const classes = useStyle(); // creating handler for switching to next question and add score if correct answer\n\n  const nextHandler = () => {\n    if (answer === userAnswer) {\n      TotalScore(score + 1);\n      setUserAnswer(\"\");\n    }\n\n    if (fetchNumberOfQuestiuons !== questionCount) {\n      setQuestionCount(questionCount + 1);\n    }\n  }; // for showing submit at last dependent on questionCount, score and fetchNumberOfQuestions\n\n\n  useEffect(() => {\n    if (fetchNumberOfQuestiuons === questionCount) {\n      setButtonToggle(true);\n    } else {\n      setButtonToggle(false);\n    }\n  }, [questionCount, score, fetchNumberOfQuestiuons]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.QuizStart,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.quesCard,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        py: 3,\n        px: 4,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          px: 1,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            style: {\n              textTransform: \"capitalize\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\" Student Name : \", username, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            py: 2,\n            px: 1,\n            children: /*#__PURE__*/_jsxDEV(Divider, {\n              className: classes.primaryColor\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            color: \"primary\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\"Question \", questionCount + 1, \" of \", fetchNumberOfQuestiuons + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          py: 2,\n          px: 1,\n          children: /*#__PURE__*/_jsxDEV(Divider, {\n            className: classes.primaryColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          py: 3,\n          px: 2,\n          className: classes.quesParent,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            children: question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          name: \"settingForm\",\n          onSubmit: callback,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            px: 1,\n            pt: 3,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              component: \"fieldset\",\n              children: [/*#__PURE__*/_jsxDEV(RadioGroup, {\n                \"aria-label\": \"gender\",\n                name: \"gender1\",\n                value: userAnswer,\n                onChange: e => setUserAnswer(e.target.value),\n                children: options.map((options, ind) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  value: options,\n                  control: /*#__PURE__*/_jsxDEV(Radio, {\n                    color: \"primary\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 110,\n                    columnNumber: 54\n                  }, this),\n                  label: options,\n                  color: \"primary\"\n                }, ind, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                py: 2,\n                children: buttonToggle ? /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: nextHandler,\n                  type: \"submit\",\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 41\n                }, this) : /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: nextHandler,\n                  disabled: userAnswer === \"\" ? true : false,\n                  children: \"Next\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionCard, \"ZG0tKloiJKp9puhwLilBgdKKVdk=\", false, function () {\n  return [useStyle];\n});\n\n_c = QuestionCard;\nexport default QuestionCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionCard\");","map":{"version":3,"sources":["E:/Bilal/Bootcamp2020/quiz-app/src/Components/QuestionCard.tsx"],"names":["React","useState","useEffect","makeStyles","Button","Box","Radio","RadioGroup","FormControlLabel","FormControl","Typography","Divider","useStyle","theme","QuizStart","height","width","display","justifyItems","alignItems","quesCard","boxShadow","margin","background","borderRadius","breakpoints","up","primaryColor","color","palette","primary","main","quesParent","loader","position","left","top","transform","QuestionCard","options","question","answer","username","fetchNumberOfQuestiuons","TotalScore","score","QuestionsCountProps","callback","userAnswer","setUserAnswer","buttonToggle","setButtonToggle","questionCount","setQuestionCount","classes","nextHandler","textTransform","e","target","value","map","ind"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// Types\r\nimport { QuestionPropsTypes } from \"./../Types/types\";\r\n// mui\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Box, Radio, RadioGroup, FormControlLabel, FormControl, Typography, Divider, CircularProgress } from \"@material-ui/core\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    QuizStart: {\r\n        height: \"100vh\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        justifyItems: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    quesCard: {\r\n        width: \"90%\",\r\n        boxShadow:\r\n            \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\r\n        margin: \"0 auto\",\r\n        background: \"white\",\r\n        borderRadius: \"0.5rem\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"70%\",\r\n        },\r\n    },\r\n    primaryColor: {\r\n        color: theme.palette.primary.main,\r\n    },\r\n    quesParent: {\r\n        background: theme.palette.primary.main,\r\n        color: \"#f3f3f3\",\r\n        borderRadius: \"0.5rem\",\r\n    },\r\n    loader: {\r\n        position: \"absolute\",\r\n        left: \"50%\",\r\n        top: \"50%\",\r\n        transform: \"translte(-50%,-50%)\",\r\n    },\r\n}));\r\n\r\nconst QuestionCard: React.FC<QuestionPropsTypes> = ({ options, question, answer, username, fetchNumberOfQuestiuons, TotalScore, score, QuestionsCountProps, callback }) => {\r\n\r\n    // declaring states\r\n    const [userAnswer, setUserAnswer] = useState<string>(\"\");\r\n    const [buttonToggle, setButtonToggle] = useState<boolean>(false);\r\n\r\n    // destructuring data\r\n    const { questionCount, setQuestionCount } = QuestionsCountProps;\r\n\r\n    // mui class\r\n    const classes = useStyle();\r\n\r\n    // creating handler for switching to next question and add score if correct answer\r\n    const nextHandler = () => {\r\n        if (answer === userAnswer) {\r\n            TotalScore(score + 1);\r\n            setUserAnswer(\"\");\r\n        }\r\n        if (fetchNumberOfQuestiuons !== questionCount) {\r\n            setQuestionCount(questionCount + 1);\r\n        }\r\n    }\r\n\r\n    // for showing submit at last dependent on questionCount, score and fetchNumberOfQuestions\r\n    useEffect(() => {\r\n        if (fetchNumberOfQuestiuons === questionCount) {\r\n            setButtonToggle(true);\r\n        } else {\r\n            setButtonToggle(false);\r\n        }\r\n    }, [questionCount, score, fetchNumberOfQuestiuons]);\r\n\r\n    return (\r\n\r\n        <div className={classes.QuizStart}>\r\n            <div className={classes.quesCard}>\r\n                <Box py={3} px={4}>\r\n                    <Box px={1}>\r\n                        <Typography variant=\"h6\" style={{ textTransform: \"capitalize\" }}>\r\n                            <b> Student Name : {username} </b>\r\n                        </Typography>\r\n                        <Box py={2} px={1}>\r\n                            <Divider className={classes.primaryColor} />\r\n                        </Box>\r\n                        <Typography variant=\"h5\" color=\"primary\">\r\n                            <b>\r\n                                {/* + 1 for getting question number and fetched questions starting from 1 as array starts from 0 index */}\r\n                                Question {questionCount + 1} of {fetchNumberOfQuestiuons + 1}\r\n                            </b>\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box py={2} px={1}>\r\n                        <Divider className={classes.primaryColor} />\r\n                    </Box>\r\n                    <Box py={3} px={2} className={classes.quesParent}>\r\n                        <Typography variant=\"h5\">\r\n                            {question}\r\n                        </Typography>\r\n                    </Box>\r\n                    <form name=\"settingForm\" onSubmit={callback}>\r\n                        <Box px={1} pt={3}>\r\n                            <FormControl component=\"fieldset\">\r\n                                <RadioGroup aria-label=\"gender\" name=\"gender1\" value={userAnswer}\r\n                                    onChange={(e) => setUserAnswer(e.target.value)}>\r\n                                    {options.map((options: string, ind: number) => (\r\n                                        <FormControlLabel key={ind}\r\n                                            value={options}\r\n                                            control={<Radio color=\"primary\" />}\r\n                                            label={options}\r\n                                            color=\"primary\" />\r\n                                    ))}\r\n                                </RadioGroup>\r\n                                <Box py={2}>\r\n                                    {buttonToggle ? (\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            onClick={nextHandler}\r\n                                            type=\"submit\">\r\n                                            Submit\r\n                                        </Button>\r\n                                    ) : (\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            onClick={nextHandler}\r\n                                            disabled={userAnswer === \"\" ? true : false}\r\n                                        >\r\n                                            Next\r\n                                        </Button>\r\n                                    )}\r\n                                </Box>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </form>\r\n                </Box>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;\r\n"]},"metadata":{},"sourceType":"module"}