{"ast":null,"code":"import _slicedToArray from\"E:/Bilal/Bootcamp2020/quiz-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"E:/Bilal/Bootcamp2020/quiz-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import React,{useState,useEffect}from\"react\";// Types\n// mui\nimport{makeStyles}from\"@material-ui/core/styles\";import{Button,Box,Radio,RadioGroup,FormControlLabel,FormControl,Typography,Divider}from\"@material-ui/core\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var useStyle=makeStyles(function(theme){return{QuizStart:{height:\"100vh\",width:\"100%\",display:\"flex\",justifyItems:\"center\",alignItems:\"center\"},quesCard:_defineProperty({width:\"90%\",boxShadow:\"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",margin:\"0 auto\",background:\"white\",borderRadius:\"0.5rem\"},theme.breakpoints.up(\"md\"),{width:\"70%\"}),primaryColor:{color:theme.palette.primary.main},quesParent:{background:theme.palette.primary.main,color:\"#f3f3f3\",borderRadius:\"0.5rem\"},loader:{position:\"absolute\",left:\"50%\",top:\"50%\",transform:\"translte(-50%,-50%)\"}};});var QuestionCard=function QuestionCard(_ref){var options=_ref.options,question=_ref.question,answer=_ref.answer,username=_ref.username,fetchNumberOfQuestiuons=_ref.fetchNumberOfQuestiuons,TotalScore=_ref.TotalScore,score=_ref.score,QuestionsCountProps=_ref.QuestionsCountProps,callback=_ref.callback;// declaring states\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),userAnswer=_useState2[0],setUserAnswer=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),buttonToggle=_useState4[0],setButtonToggle=_useState4[1];// destructuring data\nvar questionCount=QuestionsCountProps.questionCount,setQuestionCount=QuestionsCountProps.setQuestionCount;// mui class\nvar classes=useStyle();// creating handler for switching to next question and add score if correct answer\nvar nextHandler=function nextHandler(){if(answer===userAnswer){TotalScore(score+1);setUserAnswer(\"\");}if(fetchNumberOfQuestiuons!==questionCount){setQuestionCount(questionCount+1);}};// for showing submit at last dependent on questionCount, score and fetchNumberOfQuestions\nuseEffect(function(){if(fetchNumberOfQuestiuons===questionCount){setButtonToggle(true);}else{setButtonToggle(false);}},[questionCount,score,fetchNumberOfQuestiuons]);return/*#__PURE__*/_jsx(\"div\",{className:classes.QuizStart,children:/*#__PURE__*/_jsx(\"div\",{className:classes.quesCard,children:/*#__PURE__*/_jsxs(Box,{py:3,px:4,children:[/*#__PURE__*/_jsxs(Box,{px:1,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",style:{textTransform:\"capitalize\"},children:/*#__PURE__*/_jsxs(\"b\",{children:[\" Student Name : \",username,\" \"]})}),/*#__PURE__*/_jsx(Box,{py:2,px:1,children:/*#__PURE__*/_jsx(Divider,{className:classes.primaryColor})}),/*#__PURE__*/_jsx(Typography,{variant:\"h5\",color:\"primary\",children:/*#__PURE__*/_jsxs(\"b\",{children:[\"Question \",questionCount+1,\" of \",fetchNumberOfQuestiuons+1]})})]}),/*#__PURE__*/_jsx(Box,{py:2,px:1,children:/*#__PURE__*/_jsx(Divider,{className:classes.primaryColor})}),/*#__PURE__*/_jsx(Box,{py:3,px:2,className:classes.quesParent,children:/*#__PURE__*/_jsx(Typography,{variant:\"h5\",children:question})}),/*#__PURE__*/_jsx(\"form\",{name:\"settingForm\",onSubmit:callback,children:/*#__PURE__*/_jsx(Box,{px:1,pt:3,children:/*#__PURE__*/_jsxs(FormControl,{component:\"fieldset\",children:[/*#__PURE__*/_jsx(RadioGroup,{\"aria-label\":\"gender\",name:\"gender1\",value:userAnswer,onChange:function onChange(e){return setUserAnswer(e.target.value);},children:options.map(function(options,ind){return/*#__PURE__*/_jsx(FormControlLabel,{value:options,control:/*#__PURE__*/_jsx(Radio,{color:\"primary\"}),label:options,color:\"primary\"},ind);})}),/*#__PURE__*/_jsx(Box,{py:2,children:buttonToggle?/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:nextHandler,type:\"submit\",children:\"Submit\"}):/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:nextHandler,disabled:userAnswer===\"\"?true:false,children:\"Next\"})})]})})})]})})});};export default QuestionCard;","map":{"version":3,"sources":["E:/Bilal/Bootcamp2020/quiz-app/src/Components/QuestionCard.tsx"],"names":["React","useState","useEffect","makeStyles","Button","Box","Radio","RadioGroup","FormControlLabel","FormControl","Typography","Divider","useStyle","theme","QuizStart","height","width","display","justifyItems","alignItems","quesCard","boxShadow","margin","background","borderRadius","breakpoints","up","primaryColor","color","palette","primary","main","quesParent","loader","position","left","top","transform","QuestionCard","options","question","answer","username","fetchNumberOfQuestiuons","TotalScore","score","QuestionsCountProps","callback","userAnswer","setUserAnswer","buttonToggle","setButtonToggle","questionCount","setQuestionCount","classes","nextHandler","textTransform","e","target","value","map","ind"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// Types\r\nimport { QuestionPropsTypes } from \"./../Types/types\";\r\n// mui\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Box, Radio, RadioGroup, FormControlLabel, FormControl, Typography, Divider, CircularProgress } from \"@material-ui/core\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    QuizStart: {\r\n        height: \"100vh\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        justifyItems: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    quesCard: {\r\n        width: \"90%\",\r\n        boxShadow:\r\n            \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\r\n        margin: \"0 auto\",\r\n        background: \"white\",\r\n        borderRadius: \"0.5rem\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"70%\",\r\n        },\r\n    },\r\n    primaryColor: {\r\n        color: theme.palette.primary.main,\r\n    },\r\n    quesParent: {\r\n        background: theme.palette.primary.main,\r\n        color: \"#f3f3f3\",\r\n        borderRadius: \"0.5rem\",\r\n    },\r\n    loader: {\r\n        position: \"absolute\",\r\n        left: \"50%\",\r\n        top: \"50%\",\r\n        transform: \"translte(-50%,-50%)\",\r\n    },\r\n}));\r\n\r\nconst QuestionCard: React.FC<QuestionPropsTypes> = ({ options, question, answer, username, fetchNumberOfQuestiuons, TotalScore, score, QuestionsCountProps, callback }) => {\r\n\r\n    // declaring states\r\n    const [userAnswer, setUserAnswer] = useState<string>(\"\");\r\n    const [buttonToggle, setButtonToggle] = useState<boolean>(false);\r\n\r\n    // destructuring data\r\n    const { questionCount, setQuestionCount } = QuestionsCountProps;\r\n\r\n    // mui class\r\n    const classes = useStyle();\r\n\r\n    // creating handler for switching to next question and add score if correct answer\r\n    const nextHandler = () => {\r\n        if (answer === userAnswer) {\r\n            TotalScore(score + 1);\r\n            setUserAnswer(\"\");\r\n        }\r\n        if (fetchNumberOfQuestiuons !== questionCount) {\r\n            setQuestionCount(questionCount + 1);\r\n        }\r\n    }\r\n\r\n    // for showing submit at last dependent on questionCount, score and fetchNumberOfQuestions\r\n    useEffect(() => {\r\n        if (fetchNumberOfQuestiuons === questionCount) {\r\n            setButtonToggle(true);\r\n        } else {\r\n            setButtonToggle(false);\r\n        }\r\n    }, [questionCount, score, fetchNumberOfQuestiuons]);\r\n\r\n    return (\r\n\r\n        <div className={classes.QuizStart}>\r\n            <div className={classes.quesCard}>\r\n                <Box py={3} px={4}>\r\n                    <Box px={1}>\r\n                        <Typography variant=\"h6\" style={{ textTransform: \"capitalize\" }}>\r\n                            <b> Student Name : {username} </b>\r\n                        </Typography>\r\n                        <Box py={2} px={1}>\r\n                            <Divider className={classes.primaryColor} />\r\n                        </Box>\r\n                        <Typography variant=\"h5\" color=\"primary\">\r\n                            <b>\r\n                                {/* + 1 for getting question number and fetched questions starting from 1 as array starts from 0 index */}\r\n                                Question {questionCount + 1} of {fetchNumberOfQuestiuons + 1}\r\n                            </b>\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box py={2} px={1}>\r\n                        <Divider className={classes.primaryColor} />\r\n                    </Box>\r\n                    <Box py={3} px={2} className={classes.quesParent}>\r\n                        <Typography variant=\"h5\">\r\n                            {question}\r\n                        </Typography>\r\n                    </Box>\r\n                    <form name=\"settingForm\" onSubmit={callback}>\r\n                        <Box px={1} pt={3}>\r\n                            <FormControl component=\"fieldset\">\r\n                                <RadioGroup aria-label=\"gender\" name=\"gender1\" value={userAnswer}\r\n                                    onChange={(e) => setUserAnswer(e.target.value)}>\r\n                                    {options.map((options: string, ind: number) => (\r\n                                        <FormControlLabel key={ind}\r\n                                            value={options}\r\n                                            control={<Radio color=\"primary\" />}\r\n                                            label={options}\r\n                                            color=\"primary\" />\r\n                                    ))}\r\n                                </RadioGroup>\r\n                                <Box py={2}>\r\n                                    {buttonToggle ? (\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            onClick={nextHandler}\r\n                                            type=\"submit\">\r\n                                            Submit\r\n                                        </Button>\r\n                                    ) : (\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            onClick={nextHandler}\r\n                                            disabled={userAnswer === \"\" ? true : false}\r\n                                        >\r\n                                            Next\r\n                                        </Button>\r\n                                    )}\r\n                                </Box>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </form>\r\n                </Box>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;\r\n"]},"metadata":{},"sourceType":"module"}