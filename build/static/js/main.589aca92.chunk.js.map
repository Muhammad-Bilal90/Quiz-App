{"version":3,"sources":["Types/types.ts","Services/services.ts","Components/QuestionCard.tsx","Components/Settings.tsx","Components/Result.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","QuizData","numberOfQuestions","difficulty","category","a","fetch","res","json","results","quiz","map","questionsObj","question","answer","correct_answer","options","array","incorrect_answers","concat","sort","Math","random","Categories","trivia_categories","categories","useStyle","makeStyles","theme","QuizStart","height","width","display","justifyItems","alignItems","quesCard","boxShadow","margin","background","borderRadius","breakpoints","up","primaryColor","color","palette","primary","main","quesParent","loader","position","left","top","transform","QuestionCard","username","fetchNumberOfQuestiuons","TotalScore","score","QuestionsCountProps","callback","useState","userAnswer","setUserAnswer","buttonToggle","setButtonToggle","questionCount","setQuestionCount","classes","nextHandler","useEffect","className","Box","py","px","Typography","variant","style","textTransform","Divider","name","onSubmit","pt","FormControl","component","RadioGroup","aria-label","value","onChange","e","target","ind","FormControlLabel","control","Radio","label","Button","onClick","type","disabled","root","settingHeader","form","inputFields","marginTop","Settings","setSettings","setRequest","setCategories","userName","questionNumbers","error","setError","UserName","categoryName","newSettings","setNewSettings","fetchedCategories","fetchCategories","length","CircularProgress","userCategory","filter","id","userInfo","preventDefault","String","align","TextField","helperText","Number","InputLabel","htmlFor","Select","native","Easy","Medium","Hard","NativeSelect","defaultValue","pb","result","resultHeading","Result","totalScore","p","Grid","container","item","xs","justify","fontWeight","borderColor","borderWidth","borderBottom","App","setQuiz","setResult","setTotalScore","request","settings","questions","fetchData","fetchedQuestions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.589aca92.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type QuizContentTypes = {\r\n    category: string,\r\n    correct_answer: string,\r\n    difficulty: string,\r\n    incorrect_answers: string[],\r\n    question: string,\r\n    type: string,\r\n}\r\n\r\nexport type QuizTypes = {\r\n    question: string,\r\n    answer: string,\r\n    options: string[],\r\n}\r\n\r\nexport type QuestionPropsTypes = {\r\n    question: string,\r\n    options: string[],\r\n    answer: string,\r\n    username: string;\r\n    fetchNumberOfQuestiuons: number,\r\n    TotalScore: React.Dispatch<React.SetStateAction<number>>;\r\n    score: number;\r\n    QuestionsCountProps: {\r\n        questionCount: number;\r\n        setQuestionCount: React.Dispatch<React.SetStateAction<number>>;\r\n    };\r\n    callback: (e: React.FormEvent<EventTarget>) => void,\r\n}\r\n\r\nexport type SettingsTypes = {\r\n    UserName: string,\r\n    numberOfQuestions: number,\r\n    difficulty: string,\r\n    category: number,\r\n    categoryName: string,\r\n}\r\n\r\nexport type SettingsPropsTypes = {\r\n    setSettings: React.Dispatch<React.SetStateAction<SettingsTypes>>,\r\n    setRequest: React.Dispatch<React.SetStateAction<boolean>>,\r\n}\r\n\r\nexport type SettingsErrorTypes = {\r\n    userName: string,\r\n    questionNumbers: string;\r\n}\r\n\r\nexport type CategoriesTpes = {\r\n    id:number;\r\n    name: string,\r\n}\r\n\r\nexport enum Difficulty {\r\n    Easy = \"easy\",\r\n    Medium = \"medium\",\r\n    Hard = \"hard\",\r\n}\r\n\r\n//components/resultProps\r\nexport type ResultPropsTypes = {\r\n    username: string;\r\n    totalScore: number;\r\n    numberOfQuestions: number;\r\n    category: string;\r\n    difficulty: string;\r\n    callback: () => void;\r\n};\r\n  \r\n//components/result State\r\nexport type ResultStateTypes = [\r\n    { name: string; value: string },\r\n    { name: string; value: number },\r\n    { name: string; value: string },\r\n    { name: string; value: string },\r\n    { name: string; value: number }\r\n];\r\n","// Types\r\nimport { QuizTypes, QuizContentTypes, CategoriesTpes } from './../Types/types';\r\n\r\n// shuffling the array\r\n\r\nconst shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5);\r\n\r\nexport const QuizData = async (\r\n    numberOfQuestions: number,\r\n    difficulty: string,\r\n    category: number\r\n    ): Promise<QuizTypes[]> => {\r\n    const res = await fetch(`https://opentdb.com/api.php?amount=${numberOfQuestions}&category=${category}&difficulty=${difficulty}`);\r\n    const { results } = await res.json();\r\n    const quiz: QuizTypes[] = results.map((questionsObj: QuizContentTypes) => {\r\n        return {\r\n            question: questionsObj.question,\r\n            answer: questionsObj.correct_answer,\r\n            options: shuffleArray(questionsObj.incorrect_answers.concat(questionsObj.correct_answer)),\r\n        };\r\n    });\r\n    return quiz;\r\n    // console.log(results);\r\n}\r\n\r\nexport const Categories = async () => {\r\n    const res = await fetch(\"https://opentdb.com/api_category.php\");\r\n    const { trivia_categories } = await res.json();\r\n    // console.log(trivia_categories);\r\n\r\n    const categories: CategoriesTpes[] = trivia_categories;\r\n    return categories;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n// Types\r\nimport { QuestionPropsTypes } from \"./../Types/types\";\r\n// mui\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Box, Radio, RadioGroup, FormControlLabel, FormControl, Typography, Divider, CircularProgress } from \"@material-ui/core\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    QuizStart: {\r\n        height: \"100vh\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        justifyItems: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    quesCard: {\r\n        width: \"90%\",\r\n        boxShadow:\r\n            \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\r\n        margin: \"0 auto\",\r\n        background: \"white\",\r\n        borderRadius: \"0.5rem\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"70%\",\r\n        },\r\n    },\r\n    primaryColor: {\r\n        color: theme.palette.primary.main,\r\n    },\r\n    quesParent: {\r\n        background: theme.palette.primary.main,\r\n        color: \"#f3f3f3\",\r\n        borderRadius: \"0.5rem\",\r\n    },\r\n    loader: {\r\n        position: \"absolute\",\r\n        left: \"50%\",\r\n        top: \"50%\",\r\n        transform: \"translte(-50%,-50%)\",\r\n    },\r\n}));\r\n\r\nconst QuestionCard: React.FC<QuestionPropsTypes> = ({ options, question, answer, username, fetchNumberOfQuestiuons, TotalScore, score, QuestionsCountProps, callback }) => {\r\n\r\n    // declaring states\r\n    const [userAnswer, setUserAnswer] = useState<string>(\"\");\r\n    const [buttonToggle, setButtonToggle] = useState<boolean>(false);\r\n\r\n    // destructuring data\r\n    const { questionCount, setQuestionCount } = QuestionsCountProps;\r\n\r\n    // mui class\r\n    const classes = useStyle();\r\n\r\n    // creating handler for switching to next question and add score if correct answer\r\n    const nextHandler = () => {\r\n        if (answer === userAnswer) {\r\n            TotalScore(score + 1);\r\n            setUserAnswer(\"\");\r\n        }\r\n        if (fetchNumberOfQuestiuons !== questionCount) {\r\n            setQuestionCount(questionCount + 1);\r\n        }\r\n    }\r\n\r\n    // for showing submit at last dependent on questionCount, score and fetchNumberOfQuestions\r\n    useEffect(() => {\r\n        if (fetchNumberOfQuestiuons === questionCount) {\r\n            setButtonToggle(true);\r\n        } else {\r\n            setButtonToggle(false);\r\n        }\r\n    }, [questionCount, score, fetchNumberOfQuestiuons]);\r\n\r\n    return (\r\n\r\n        <div className={classes.QuizStart}>\r\n            <div className={classes.quesCard}>\r\n                <Box py={3} px={4}>\r\n                    <Box px={1}>\r\n                        <Typography variant=\"h6\" style={{ textTransform: \"capitalize\" }}>\r\n                            <b> Student Name : {username} </b>\r\n                        </Typography>\r\n                        <Box py={2} px={1}>\r\n                            <Divider className={classes.primaryColor} />\r\n                        </Box>\r\n                        <Typography variant=\"h5\" color=\"primary\">\r\n                            <b>\r\n                                {/* + 1 for getting question number and fetched questions starting from 1 as array starts from 0 index */}\r\n                                Question {questionCount + 1} of {fetchNumberOfQuestiuons + 1}\r\n                            </b>\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box py={2} px={1}>\r\n                        <Divider className={classes.primaryColor} />\r\n                    </Box>\r\n                    <Box py={3} px={2} className={classes.quesParent}>\r\n                        <Typography variant=\"h5\">\r\n                            {question}\r\n                        </Typography>\r\n                    </Box>\r\n                    <form name=\"settingForm\" onSubmit={callback}>\r\n                        <Box px={1} pt={3}>\r\n                            <FormControl component=\"fieldset\">\r\n                                <RadioGroup aria-label=\"gender\" name=\"gender1\" value={userAnswer}\r\n                                    onChange={(e) => setUserAnswer(e.target.value)}>\r\n                                    {options.map((options: string, ind: number) => (\r\n                                        <FormControlLabel key={ind}\r\n                                            value={options}\r\n                                            control={<Radio color=\"primary\" />}\r\n                                            label={options}\r\n                                            color=\"primary\" />\r\n                                    ))}\r\n                                </RadioGroup>\r\n                                <Box py={2}>\r\n                                    {buttonToggle ? (\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            onClick={nextHandler}\r\n                                            type=\"submit\">\r\n                                            Submit\r\n                                        </Button>\r\n                                    ) : (\r\n                                        <Button variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            onClick={nextHandler}\r\n                                            disabled={userAnswer === \"\" ? true : false}\r\n                                        >\r\n                                            Next\r\n                                        </Button>\r\n                                    )}\r\n                                </Box>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </form>\r\n                </Box>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import React, { useState, useEffect } from 'react';\r\n// Types\r\nimport { SettingsPropsTypes, SettingsTypes, SettingsErrorTypes, CategoriesTpes, Difficulty } from './../Types/types';\r\n// Service\r\nimport { Categories } from './../Services/services';\r\n// mui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    InputLabel,\r\n    FormControl,\r\n    Select,\r\n    TextField,\r\n    Box,\r\n    Typography,\r\n    NativeSelect,\r\n    Button,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    root: {\r\n        height: \"100vh\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        justifyItems: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    loader: {\r\n        position: \"absolute\",\r\n        left: \"50%\",\r\n        top: \"50%\",\r\n        transform: \"translte(-50%,-50%)\",\r\n    },\r\n    settingHeader: {\r\n        background: theme.palette.primary.main,\r\n        color: \"white\",\r\n        borderRadius: \"0.5rem\",\r\n    },\r\n    form: {\r\n        width: \"90%\",\r\n        boxShadow:\r\n            \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\r\n        margin: \"0 auto\",\r\n        background: \"white\",\r\n        borderRadius: \"0.5rem\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"60%\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"50%\",\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"30%\",\r\n        },\r\n    },\r\n    inputFields: {\r\n        width: \"100%\",\r\n        marginTop: \"20px\",\r\n    },\r\n}));\r\n\r\nconst Settings: React.FC<SettingsPropsTypes> = ({ setSettings, setRequest }) => {\r\n\r\n    const classes = useStyle();\r\n \r\n    // Setting States\r\n    const [categories, setCategories] = useState<CategoriesTpes[]>([]);\r\n    const [error, setError] = useState<SettingsErrorTypes>({\r\n        userName: \"\",\r\n        questionNumbers: \"\"\r\n    });\r\n    const [newSettings, setNewSettings] = useState<SettingsTypes>({\r\n        UserName: \"\",\r\n        numberOfQuestions: 5,\r\n        difficulty: \"easy\",\r\n        category: 9,\r\n        categoryName: \"General Knowledge\",\r\n    })\r\n\r\n    //useEffect to get data of Categories\r\n    // useEffect(() => {\r\n    //     const fetchCategories = async () => {\r\n    //         const fetchedCategories = await Categories();\r\n    //         setCategories(fetchedCategories);\r\n    //     };\r\n    //     fetchCategories();\r\n    // }, []);\r\n\r\n    // useEffect for fetching categories and setting them to categories state\r\n    useEffect(() => {\r\n        const fetchCategories = async () => {\r\n            const fetchedCategories = await Categories();\r\n            setCategories(fetchedCategories);\r\n        }\r\n        fetchCategories();\r\n    }, []);\r\n\r\n    // setting Loader if categories not loaded\r\n    if (!categories.length) {\r\n        return (\r\n            <div>\r\n                <CircularProgress color=\"secondary\" className={classes.loader} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // creating handler for submiting the user information and validation for user form and sending request for the quiz\r\n    const submitHandler = (e: React.FormEvent<EventTarget>) => {\r\n        e.preventDefault();\r\n        setSettings(userInfo);\r\n        \r\n        if (newSettings.UserName === \"\") {\r\n            setError({\r\n                ...error,\r\n                userName: String(\"User name is required\"),\r\n            });\r\n        } else if (newSettings.numberOfQuestions <= 3 || newSettings.numberOfQuestions >= 50) {\r\n            setError({\r\n                ...error,\r\n                questionNumbers: String(\"Number of Questions must be between 3 to 50\"),\r\n            })\r\n        } else {\r\n            setRequest(true);\r\n        }\r\n        \r\n    }\r\n\r\n    // filtering out the specific category\r\n    let userCategory = categories.filter((category) => {\r\n        return category.id === newSettings.category\r\n    });\r\n\r\n    // console.log(userCategory[0].name, \"5687/987\");\r\n\r\n    // setting user information state\r\n    const userInfo: SettingsTypes = {\r\n        UserName: newSettings.UserName,\r\n        numberOfQuestions: newSettings.numberOfQuestions,\r\n        difficulty: newSettings.difficulty,\r\n        category: newSettings.category,\r\n        categoryName: userCategory[0].name,\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.root}>\r\n                <form className={classes.form} onSubmit={submitHandler}>\r\n                    <Box py={3} px={4}>\r\n                        <div className={classes.settingHeader}>\r\n                            <Box py={2} px={1}>\r\n                                <Typography variant=\"h4\" align=\"center\">\r\n                                    Settings\r\n                        </Typography>\r\n                            </Box>\r\n                        </div>\r\n                        <TextField\r\n                            error={error.userName === \"\" ? false : true}\r\n                            helperText={error.userName === \"\" ? \"\" : error.userName}\r\n                            id=\"standard-basic\"\r\n                            label=\"Your Name\"\r\n                            type=\"text\"\r\n                            value={\r\n                                newSettings.UserName\r\n                            }\r\n                            onChange={(e) => {\r\n                                setNewSettings({\r\n                                    ...newSettings,\r\n                                    UserName: String(e.target.value),\r\n                                });\r\n                                setError({\r\n                                    ...error,\r\n                                    userName: \"\",\r\n                                });\r\n                            }}\r\n                            className={classes.inputFields}\r\n                        />\r\n                        <TextField\r\n                            error={error.questionNumbers === \"\" ? false : true}\r\n                            helperText={error.questionNumbers === \"\" ? \"\" : error.questionNumbers}\r\n                            id=\"standard-basic\"\r\n                            label=\"Select Number of Questions\"\r\n                            type=\"number\"\r\n                            value={\r\n                                newSettings.numberOfQuestions === 0 ? \"\" : newSettings.numberOfQuestions\r\n                            }\r\n                            onChange={(e) => {\r\n                                setNewSettings({\r\n                                    ...newSettings,\r\n                                    numberOfQuestions: Number(e.target.value),\r\n                                });\r\n                                setError({\r\n                                    ...error,\r\n                                    questionNumbers: \"\",\r\n                                });\r\n                            }}\r\n                            className={classes.inputFields}\r\n                        />\r\n                        <FormControl className={classes.inputFields}>\r\n                            <InputLabel htmlFor=\"grouped-native-select\">\r\n                                Select Difficulty\r\n                            </InputLabel>\r\n                            <Select native id=\"grouped-native-select\" onChange={(e) => {\r\n                                setNewSettings({ ...newSettings, difficulty: String(e.target.value) })\r\n                            }}>\r\n                                <option value={Difficulty.Easy}>Easy</option>\r\n                                <option value={Difficulty.Medium}>Medium</option>\r\n                                <option value={Difficulty.Hard}>Hard</option>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className={classes.inputFields}>\r\n                            <InputLabel htmlFor=\"grouped-native-select\">\r\n                                Select Category\r\n                            </InputLabel>\r\n                            <NativeSelect id=\"grouped-native-select\" defaultValue=\"\"\r\n                                onChange={(e) => {\r\n                                    setNewSettings({ ...newSettings, category: Number(e.target.value) })\r\n                                }}>\r\n                                {categories.map((category: CategoriesTpes) => (\r\n                                    <option key={category.id} value={category.id}>\r\n                                        {category.name}\r\n                                    </option>\r\n                                ))}\r\n                            </NativeSelect>\r\n                        </FormControl>\r\n                        <Box pt={4} pb={1}>\r\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                                Start Quiz\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\n// Types\r\nimport { ResultPropsTypes, ResultStateTypes } from './../Types/types';\r\n// mui\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, Typography, Grid, Button } from \"@material-ui/core\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    root: {\r\n        height: \"100vh\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        justifyItems: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    result: {\r\n        width: \"90%\",\r\n        boxShadow:\r\n            \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\r\n        margin: \"0 auto\",\r\n        background: \"white\",\r\n        borderRadius: \"0.5rem\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"60%\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"50%\",\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"30%\",\r\n        },\r\n    },\r\n    inputFields: {\r\n        width: \"100%\",\r\n        marginTop: \"20px\",\r\n    },\r\n    resultHeading: {\r\n        background: theme.palette.primary.main,\r\n        color: \"white\",\r\n        borderRadius: \"0.5rem\",\r\n    },\r\n}));\r\n\r\nconst Result: React.FC<ResultPropsTypes> = ({\r\n    username,\r\n    totalScore,\r\n    numberOfQuestions,\r\n    category,\r\n    difficulty,\r\n    callback,\r\n}) => {\r\n\r\n    const classes = useStyle();\r\n\r\n    // Creating Result state\r\n    const result: ResultStateTypes = [\r\n        { name: \"name\", value: username },\r\n        { name: \"total questions\", value: numberOfQuestions },\r\n        { name: \"difficulty level\", value: difficulty },\r\n        { name: \"category\", value: category },\r\n        { name: \"score\", value: totalScore },\r\n    ];\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.result}>\r\n                <Box p={3}>\r\n                    <Box py={1} className={classes.resultHeading}>\r\n                        <Typography variant=\"h5\" align=\"center\">\r\n                            Result\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box px={1} pb={1} pt={3}>\r\n                        {result.map((result: any, ind: number) => (\r\n                            <div key={ind}>\r\n                                <Box py={1}>\r\n                                    <Grid container>\r\n                                        <Grid item container xs={6} justify=\"flex-start\" alignItems=\"center\">\r\n                                            <Typography style={{ fontWeight: 550, textTransform: \"capitalize\" }}\r\n                                                variant=\"subtitle1\" align=\"center\">\r\n                                                {result.name}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item container xs={6} justify=\"center\" alignItems=\"center\">\r\n                                            <Typography style={{ fontWeight: 550, textTransform: \"capitalize\" }}\r\n                                                variant=\"subtitle1\" align=\"center\" color=\"textSecondary\">\r\n                                                {result.value}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Box>\r\n                                <hr style={{ borderColor: \"#259cf7\", borderWidth: \"1px\", borderBottom: \"none\" }} />\r\n                            </div>\r\n                        ))}\r\n                        <Box pt={4}>\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={callback}>\r\n                                New Quiz\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, { useEffect, useState } from 'react';\n// css\nimport './App.css';\n// Services\nimport { QuizData } from './Services/services';\n// Types\nimport { QuizTypes, SettingsTypes } from './Types/types';\n// Components\nimport QuestionCard from './Components/QuestionCard';\nimport Settings from './Components/Settings';\nimport Result from './Components/Result';\n\nfunction App() {\n\n  // setting states\n  const [quiz, setQuiz] = useState<QuizTypes[]>([]);\n  let [questionCount, setQuestionCount] = useState<number>(0);\n  const [result, setResult] = useState<boolean>(false);\n  const [totalScore, setTotalScore] = useState<number>(0);\n  const [request, setRequest] = useState<boolean>(false);\n  const [settings, setSettings] = useState<SettingsTypes>({\n    UserName: \"\",\n    numberOfQuestions: 5,\n    difficulty: \"easy\",\n    category: 9,\n    categoryName: \"General Knowledge\",\n  });\n\n  // creating handler for starting New Quiz\n  const handleSubmit = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n    setResult(true);\n  }\n  const NewQuiz = () => {\n    // clearing following states\n    setQuiz([]);\n\n    // setting score to 0\n    setTotalScore(0);\n\n    //to make question count to 0 so questions will start from Q1\n    setQuestionCount(0);\n\n    //to close result card\n    setResult(false);\n\n    //to stop sending initial request to api waiting for settings\n    setRequest(false);\n  };\n\n  // fetching quiz content for the quiz dependent on settings provided by the user and request by the user\n  useEffect(() => {\n    const fetchData = async () => {\n      if (request) {\n        const questions = await QuizData(\n          settings.numberOfQuestions,\n          settings.difficulty,\n          settings.category\n        );\n        // console.log(questions, '23456');\n        setQuiz(questions);\n      }\n    }\n    fetchData();\n  }, [settings, request]);\n\n  // to get total questions requested (.length = total length of the array)\n  let fetchedQuestions = quiz.length - 1;\n\n  return (\n    <>\n      {quiz.length ? (\n        !result ? (\n          <QuestionCard\n            question={quiz[questionCount].question}\n            options={quiz[questionCount].options}\n            answer={quiz[questionCount].answer}\n            username={settings.UserName}\n            fetchNumberOfQuestiuons={fetchedQuestions}\n            TotalScore={setTotalScore}\n            score={totalScore}\n            QuestionsCountProps={{ questionCount, setQuestionCount }}\n            callback={handleSubmit}\n          />\n        ) : (\n          <Result\n            username={settings.UserName}\n            totalScore={totalScore}\n            numberOfQuestions={settings.numberOfQuestions}\n            category={settings.categoryName}\n            difficulty={settings.difficulty}\n            callback={NewQuiz}\n          />\n        )\n      ) : (\n        <Settings\n          setSettings={setSettings}\n          setRequest={setRequest}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}