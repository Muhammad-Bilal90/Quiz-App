{"ast":null,"code":"var _jsxFileName = \"E:\\\\Bilal\\\\Bootcamp2020\\\\quiz-app\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // css\n\nimport './App.css'; // Services\n\nimport { QuizData } from './Services/services'; // Types\n\n// Components\nimport QuestionCard from './Components/QuestionCard';\nimport Settings from './Components/Settings';\nimport Result from './Components/Result';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // setting states\n  const [quiz, setQuiz] = useState([]);\n  let [questionCount, setQuestionCount] = useState(0);\n  const [result, setResult] = useState(false);\n  const [totalScore, setTotalScore] = useState(0);\n  const [request, setRequest] = useState(false);\n  const [settings, setSettings] = useState({\n    UserName: \"\",\n    numberOfQuestions: 5,\n    difficulty: \"easy\",\n    category: 9,\n    categoryName: \"General Knowledge\"\n  }); // creating handler for starting New Quiz\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setResult(true);\n  };\n\n  const NewQuiz = () => {\n    // clearing following states\n    setQuiz([]); // setting score to 0\n\n    setTotalScore(0); //to make question count to 0 so questions will start from Q1\n\n    setQuestionCount(0); //to close result card\n\n    setResult(false); //to stop sending initial request to api waiting for settings\n\n    setRequest(false);\n  }; // fetching quiz content for the quiz dependent on settings provided by the user and request by the user\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (request) {\n        const questions = await QuizData(settings.numberOfQuestions, settings.difficulty, settings.category); // console.log(questions, '23456');\n\n        setQuiz(questions);\n      }\n    };\n\n    fetchData();\n  }, [settings, request]); // to get total questions requested (.length = total length of the array)\n\n  let fetchedQuestions = quiz.length - 1;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: quiz.length ? !result ? /*#__PURE__*/_jsxDEV(QuestionCard, {\n      question: quiz[questionCount].question,\n      options: quiz[questionCount].options,\n      answer: quiz[questionCount].answer,\n      username: settings.UserName,\n      fetchNumberOfQuestiuons: fetchedQuestions,\n      TotalScore: setTotalScore,\n      score: totalScore,\n      QuestionsCountProps: {\n        questionCount,\n        setQuestionCount\n      },\n      callback: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Result, {\n      username: settings.UserName,\n      totalScore: totalScore,\n      numberOfQuestions: settings.numberOfQuestions,\n      category: settings.categoryName,\n      difficulty: settings.difficulty,\n      callback: NewQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Settings, {\n      setSettings: setSettings,\n      setRequest: setRequest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"WVN9uiVW1t713sxjWXTCOqvM5rA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/Bilal/Bootcamp2020/quiz-app/src/App.tsx"],"names":["React","useEffect","useState","QuizData","QuestionCard","Settings","Result","App","quiz","setQuiz","questionCount","setQuestionCount","result","setResult","totalScore","setTotalScore","request","setRequest","settings","setSettings","UserName","numberOfQuestions","difficulty","category","categoryName","handleSubmit","e","preventDefault","NewQuiz","fetchData","questions","fetchedQuestions","length","question","options","answer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// css\nimport './App.css';\n// Services\nimport { QuizData } from './Services/services';\n// Types\nimport { QuizTypes, SettingsTypes } from './Types/types';\n// Components\nimport QuestionCard from './Components/QuestionCard';\nimport Settings from './Components/Settings';\nimport Result from './Components/Result';\n\nfunction App() {\n\n  // setting states\n  const [quiz, setQuiz] = useState<QuizTypes[]>([]);\n  let [questionCount, setQuestionCount] = useState<number>(0);\n  const [result, setResult] = useState<boolean>(false);\n  const [totalScore, setTotalScore] = useState<number>(0);\n  const [request, setRequest] = useState<boolean>(false);\n  const [settings, setSettings] = useState<SettingsTypes>({\n    UserName: \"\",\n    numberOfQuestions: 5,\n    difficulty: \"easy\",\n    category: 9,\n    categoryName: \"General Knowledge\",\n  });\n\n  // creating handler for starting New Quiz\n  const handleSubmit = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n    setResult(true);\n  }\n  const NewQuiz = () => {\n    // clearing following states\n    setQuiz([]);\n\n    // setting score to 0\n    setTotalScore(0);\n\n    //to make question count to 0 so questions will start from Q1\n    setQuestionCount(0);\n\n    //to close result card\n    setResult(false);\n\n    //to stop sending initial request to api waiting for settings\n    setRequest(false);\n  };\n\n  // fetching quiz content for the quiz dependent on settings provided by the user and request by the user\n  useEffect(() => {\n    const fetchData = async () => {\n      if (request) {\n        const questions = await QuizData(\n          settings.numberOfQuestions,\n          settings.difficulty,\n          settings.category\n        );\n        // console.log(questions, '23456');\n        setQuiz(questions);\n      }\n    }\n    fetchData();\n  }, [settings, request]);\n\n  // to get total questions requested (.length = total length of the array)\n  let fetchedQuestions = quiz.length - 1;\n\n  return (\n    <>\n      {quiz.length ? (\n        !result ? (\n          <QuestionCard\n            question={quiz[questionCount].question}\n            options={quiz[questionCount].options}\n            answer={quiz[questionCount].answer}\n            username={settings.UserName}\n            fetchNumberOfQuestiuons={fetchedQuestions}\n            TotalScore={setTotalScore}\n            score={totalScore}\n            QuestionsCountProps={{ questionCount, setQuestionCount }}\n            callback={handleSubmit}\n          />\n        ) : (\n          <Result\n            username={settings.UserName}\n            totalScore={totalScore}\n            numberOfQuestions={settings.numberOfQuestions}\n            category={settings.categoryName}\n            difficulty={settings.difficulty}\n            callback={NewQuiz}\n          />\n        )\n      ) : (\n        <Settings\n          setSettings={setSettings}\n          setRequest={setRequest}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}