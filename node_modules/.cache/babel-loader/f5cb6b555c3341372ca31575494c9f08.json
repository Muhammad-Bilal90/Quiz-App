{"ast":null,"code":"import _regeneratorRuntime from\"E:/Bilal/Bootcamp2020/quiz-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"E:/Bilal/Bootcamp2020/quiz-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"E:/Bilal/Bootcamp2020/quiz-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';// css\nimport'./App.css';// Services\nimport{QuizData}from'./Services/services';// Types\n// Components\nimport QuestionCard from'./Components/QuestionCard';import Settings from'./Components/Settings';import Result from'./Components/Result';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function App(){// setting states\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),quiz=_useState2[0],setQuiz=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),questionCount=_useState4[0],setQuestionCount=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),result=_useState6[0],setResult=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),totalScore=_useState8[0],setTotalScore=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),request=_useState10[0],setRequest=_useState10[1];var _useState11=useState({UserName:\"\",numberOfQuestions:5,difficulty:\"easy\",category:9,categoryName:\"General Knowledge\"}),_useState12=_slicedToArray(_useState11,2),settings=_useState12[0],setSettings=_useState12[1];// creating handler for starting New Quiz\nvar handleSubmit=function handleSubmit(e){e.preventDefault();setResult(true);};var NewQuiz=function NewQuiz(){// clearing following states\nsetQuiz([]);// setting score to 0\nsetTotalScore(0);//to make question count to 0 so questions will start from Q1\nsetQuestionCount(0);//to close result card\nsetResult(false);//to stop sending initial request to api waiting for settings\nsetRequest(false);};// fetching quiz content for the quiz dependent on settings provided by the user and request by the user\nuseEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var questions;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!request){_context.next=5;break;}_context.next=3;return QuizData(settings.numberOfQuestions,settings.difficulty,settings.category);case 3:questions=_context.sent;// console.log(questions, '23456');\nsetQuiz(questions);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchData(){return _ref.apply(this,arguments);};}();fetchData();},[settings,request]);// to get total questions requested (.length = total length of the array)\nvar fetchedQuestions=quiz.length-1;return/*#__PURE__*/_jsx(_Fragment,{children:quiz.length?!result?/*#__PURE__*/_jsx(QuestionCard,{question:quiz[questionCount].question,options:quiz[questionCount].options,answer:quiz[questionCount].answer,username:settings.UserName,fetchNumberOfQuestiuons:fetchedQuestions,TotalScore:setTotalScore,score:totalScore,QuestionsCountProps:{questionCount:questionCount,setQuestionCount:setQuestionCount},callback:handleSubmit}):/*#__PURE__*/_jsx(Result,{username:settings.UserName,totalScore:totalScore,numberOfQuestions:settings.numberOfQuestions,category:settings.categoryName,difficulty:settings.difficulty,callback:NewQuiz}):/*#__PURE__*/_jsx(Settings,{setSettings:setSettings,setRequest:setRequest})});}export default App;","map":{"version":3,"sources":["E:/Bilal/Bootcamp2020/quiz-app/src/App.tsx"],"names":["React","useEffect","useState","QuizData","QuestionCard","Settings","Result","App","quiz","setQuiz","questionCount","setQuestionCount","result","setResult","totalScore","setTotalScore","request","setRequest","UserName","numberOfQuestions","difficulty","category","categoryName","settings","setSettings","handleSubmit","e","preventDefault","NewQuiz","fetchData","questions","fetchedQuestions","length","question","options","answer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n// css\nimport './App.css';\n// Services\nimport { QuizData } from './Services/services';\n// Types\nimport { QuizTypes, SettingsTypes } from './Types/types';\n// Components\nimport QuestionCard from './Components/QuestionCard';\nimport Settings from './Components/Settings';\nimport Result from './Components/Result';\n\nfunction App() {\n\n  // setting states\n  const [quiz, setQuiz] = useState<QuizTypes[]>([]);\n  let [questionCount, setQuestionCount] = useState<number>(0);\n  const [result, setResult] = useState<boolean>(false);\n  const [totalScore, setTotalScore] = useState<number>(0);\n  const [request, setRequest] = useState<boolean>(false);\n  const [settings, setSettings] = useState<SettingsTypes>({\n    UserName: \"\",\n    numberOfQuestions: 5,\n    difficulty: \"easy\",\n    category: 9,\n    categoryName: \"General Knowledge\",\n  });\n\n  // creating handler for starting New Quiz\n  const handleSubmit = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n    setResult(true);\n  }\n  const NewQuiz = () => {\n    // clearing following states\n    setQuiz([]);\n\n    // setting score to 0\n    setTotalScore(0);\n\n    //to make question count to 0 so questions will start from Q1\n    setQuestionCount(0);\n\n    //to close result card\n    setResult(false);\n\n    //to stop sending initial request to api waiting for settings\n    setRequest(false);\n  };\n\n  // fetching quiz content for the quiz dependent on settings provided by the user and request by the user\n  useEffect(() => {\n    const fetchData = async () => {\n      if (request) {\n        const questions = await QuizData(\n          settings.numberOfQuestions,\n          settings.difficulty,\n          settings.category\n        );\n        // console.log(questions, '23456');\n        setQuiz(questions);\n      }\n    }\n    fetchData();\n  }, [settings, request]);\n\n  // to get total questions requested (.length = total length of the array)\n  let fetchedQuestions = quiz.length - 1;\n\n  return (\n    <>\n      {quiz.length ? (\n        !result ? (\n          <QuestionCard\n            question={quiz[questionCount].question}\n            options={quiz[questionCount].options}\n            answer={quiz[questionCount].answer}\n            username={settings.UserName}\n            fetchNumberOfQuestiuons={fetchedQuestions}\n            TotalScore={setTotalScore}\n            score={totalScore}\n            QuestionsCountProps={{ questionCount, setQuestionCount }}\n            callback={handleSubmit}\n          />\n        ) : (\n          <Result\n            username={settings.UserName}\n            totalScore={totalScore}\n            numberOfQuestions={settings.numberOfQuestions}\n            category={settings.categoryName}\n            difficulty={settings.difficulty}\n            callback={NewQuiz}\n          />\n        )\n      ) : (\n        <Settings\n          setSettings={setSettings}\n          setRequest={setRequest}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}