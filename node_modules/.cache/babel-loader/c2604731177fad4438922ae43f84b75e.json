{"ast":null,"code":"var _jsxFileName = \"E:\\\\Bilal\\\\Bootcamp2020\\\\quiz-app\\\\src\\\\Components\\\\Settings.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // Types\n\nimport { Difficulty } from './../Types/types'; // Service\n\nimport { Categories } from './../Services/services'; // mui\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { InputLabel, FormControl, Select, TextField, Box, Typography, NativeSelect, Button, CircularProgress } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyle = makeStyles(theme => ({\n  root: {\n    height: \"100vh\",\n    width: \"100%\",\n    display: \"flex\",\n    justifyItems: \"center\",\n    alignItems: \"center\"\n  },\n  loader: {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translte(-50%,-50%)\"\n  },\n  settingHeader: {\n    background: theme.palette.primary.main,\n    color: \"white\",\n    borderRadius: \"0.5rem\"\n  },\n  form: {\n    width: \"90%\",\n    boxShadow: \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\n    margin: \"0 auto\",\n    background: \"white\",\n    borderRadius: \"0.5rem\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: \"60%\"\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"50%\"\n    },\n    [theme.breakpoints.up(\"lg\")]: {\n      width: \"30%\"\n    }\n  },\n  inputFields: {\n    width: \"100%\",\n    marginTop: \"20px\"\n  }\n}));\n\nconst Settings = ({\n  setSettings,\n  setRequest\n}) => {\n  _s();\n\n  const classes = useStyle(); // Setting States\n\n  const [categories, setCategories] = useState([]);\n  const [error, setError] = useState({\n    userName: \"\",\n    questionNumbers: \"\"\n  });\n  const [newSettings, setNewSettings] = useState({\n    UserName: \"\",\n    numberOfQuestions: 5,\n    difficulty: \"easy\",\n    category: 9,\n    categoryName: \"General Knowledge\"\n  }); //useEffect to get data of Categories\n  // useEffect(() => {\n  //     const fetchCategories = async () => {\n  //         const fetchedCategories = await Categories();\n  //         setCategories(fetchedCategories);\n  //     };\n  //     fetchCategories();\n  // }, []);\n  // useEffect for fetching categories and setting them to categories state\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      const fetchedCategories = await Categories();\n      setCategories(fetchedCategories);\n    };\n\n    fetchCategories();\n  }, []); // setting Loader if categories not loaded\n\n  if (!categories.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"secondary\",\n        className: classes.loader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  } // creating handler for submiting the user information and validation for user form and sending request for the quiz\n\n\n  const submitHandler = e => {\n    e.preventDefault();\n    setSettings(userInfo);\n\n    if (newSettings.UserName === \"\") {\n      setError({ ...error,\n        userName: String(\"User name is required\")\n      });\n    } else if (newSettings.numberOfQuestions <= 3 || newSettings.numberOfQuestions >= 50) {\n      setError({ ...error,\n        questionNumbers: String(\"Number of Questions must be between 3 to 50\")\n      });\n    } else {\n      setRequest(true);\n    }\n  }; // filtering out the specific category\n\n\n  let userCategory = categories.filter(category => {\n    return category.id === newSettings.category;\n  }); // console.log(userCategory[0].name, \"5687/987\");\n  // setting user information state\n\n  const userInfo = {\n    UserName: newSettings.UserName,\n    numberOfQuestions: newSettings.numberOfQuestions,\n    difficulty: newSettings.difficulty,\n    category: newSettings.category,\n    categoryName: userCategory[0].name\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.form,\n        onSubmit: submitHandler,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          py: 3,\n          px: 4,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.settingHeader,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              py: 2,\n              px: 1,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                align: \"center\",\n                children: \"Settings\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            error: error.userName === \"\" ? false : true,\n            helperText: error.userName === \"\" ? \"\" : error.userName,\n            id: \"standard-basic\",\n            label: \"Your Name\",\n            type: \"text\",\n            value: newSettings.UserName,\n            onChange: e => {\n              setNewSettings({ ...newSettings,\n                UserName: String(e.target.value)\n              });\n              setError({ ...error,\n                userName: \"\"\n              });\n            },\n            className: classes.inputFields\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            error: error.questionNumbers === \"\" ? false : true,\n            helperText: error.questionNumbers === \"\" ? \"\" : error.questionNumbers,\n            id: \"standard-basic\",\n            label: \"Select Number of Questions\",\n            type: \"number\",\n            value: newSettings.numberOfQuestions === 0 ? \"\" : newSettings.numberOfQuestions,\n            onChange: e => {\n              setNewSettings({ ...newSettings,\n                numberOfQuestions: Number(e.target.value)\n              });\n              setError({ ...error,\n                questionNumbers: \"\"\n              });\n            },\n            className: classes.inputFields\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            className: classes.inputFields,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"grouped-native-select\",\n              children: \"Select Difficulty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              native: true,\n              id: \"grouped-native-select\",\n              onChange: e => {\n                setNewSettings({ ...newSettings,\n                  difficulty: String(e.target.value)\n                });\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: Difficulty.Easy,\n                children: \"Easy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: Difficulty.Medium,\n                children: \"Medium\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: Difficulty.Hard,\n                children: \"Hard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            className: classes.inputFields,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"grouped-native-select\",\n              children: \"Select Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(NativeSelect, {\n              id: \"grouped-native-select\",\n              defaultValue: \"\",\n              onChange: e => {\n                setNewSettings({ ...newSettings,\n                  category: Number(e.target.value)\n                });\n              },\n              children: categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: category.id,\n                children: category.name\n              }, category.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            pt: 4,\n            pb: 1,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              type: \"submit\",\n              children: \"Start Quiz\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Settings, \"winSZUhHXZX47NTMUINYrwc2yvA=\", false, function () {\n  return [useStyle];\n});\n\n_c = Settings;\nexport default Settings;\n\nvar _c;\n\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"sources":["E:/Bilal/Bootcamp2020/quiz-app/src/Components/Settings.tsx"],"names":["React","useState","useEffect","Difficulty","Categories","makeStyles","InputLabel","FormControl","Select","TextField","Box","Typography","NativeSelect","Button","CircularProgress","useStyle","theme","root","height","width","display","justifyItems","alignItems","loader","position","left","top","transform","settingHeader","background","palette","primary","main","color","borderRadius","form","boxShadow","margin","breakpoints","up","inputFields","marginTop","Settings","setSettings","setRequest","classes","categories","setCategories","error","setError","userName","questionNumbers","newSettings","setNewSettings","UserName","numberOfQuestions","difficulty","category","categoryName","fetchCategories","fetchedCategories","length","submitHandler","e","preventDefault","userInfo","String","userCategory","filter","id","name","target","value","Number","Easy","Medium","Hard","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// Types\r\nimport { SettingsPropsTypes, SettingsTypes, SettingsErrorTypes, CategoriesTpes, Difficulty } from './../Types/types';\r\n// Service\r\nimport { Categories } from './../Services/services';\r\n// mui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    InputLabel,\r\n    FormControl,\r\n    Select,\r\n    TextField,\r\n    Box,\r\n    Typography,\r\n    NativeSelect,\r\n    Button,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    root: {\r\n        height: \"100vh\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        justifyItems: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    loader: {\r\n        position: \"absolute\",\r\n        left: \"50%\",\r\n        top: \"50%\",\r\n        transform: \"translte(-50%,-50%)\",\r\n    },\r\n    settingHeader: {\r\n        background: theme.palette.primary.main,\r\n        color: \"white\",\r\n        borderRadius: \"0.5rem\",\r\n    },\r\n    form: {\r\n        width: \"90%\",\r\n        boxShadow:\r\n            \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\r\n        margin: \"0 auto\",\r\n        background: \"white\",\r\n        borderRadius: \"0.5rem\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"60%\",\r\n        },\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"50%\",\r\n        },\r\n        [theme.breakpoints.up(\"lg\")]: {\r\n            width: \"30%\",\r\n        },\r\n    },\r\n    inputFields: {\r\n        width: \"100%\",\r\n        marginTop: \"20px\",\r\n    },\r\n}));\r\n\r\nconst Settings: React.FC<SettingsPropsTypes> = ({ setSettings, setRequest }) => {\r\n\r\n    const classes = useStyle();\r\n \r\n    // Setting States\r\n    const [categories, setCategories] = useState<CategoriesTpes[]>([]);\r\n    const [error, setError] = useState<SettingsErrorTypes>({\r\n        userName: \"\",\r\n        questionNumbers: \"\"\r\n    });\r\n    const [newSettings, setNewSettings] = useState<SettingsTypes>({\r\n        UserName: \"\",\r\n        numberOfQuestions: 5,\r\n        difficulty: \"easy\",\r\n        category: 9,\r\n        categoryName: \"General Knowledge\",\r\n    })\r\n\r\n    //useEffect to get data of Categories\r\n    // useEffect(() => {\r\n    //     const fetchCategories = async () => {\r\n    //         const fetchedCategories = await Categories();\r\n    //         setCategories(fetchedCategories);\r\n    //     };\r\n    //     fetchCategories();\r\n    // }, []);\r\n\r\n    // useEffect for fetching categories and setting them to categories state\r\n    useEffect(() => {\r\n        const fetchCategories = async () => {\r\n            const fetchedCategories = await Categories();\r\n            setCategories(fetchedCategories);\r\n        }\r\n        fetchCategories();\r\n    }, []);\r\n\r\n    // setting Loader if categories not loaded\r\n    if (!categories.length) {\r\n        return (\r\n            <div>\r\n                <CircularProgress color=\"secondary\" className={classes.loader} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // creating handler for submiting the user information and validation for user form and sending request for the quiz\r\n    const submitHandler = (e: React.FormEvent<EventTarget>) => {\r\n        e.preventDefault();\r\n        setSettings(userInfo);\r\n        \r\n        if (newSettings.UserName === \"\") {\r\n            setError({\r\n                ...error,\r\n                userName: String(\"User name is required\"),\r\n            });\r\n        } else if (newSettings.numberOfQuestions <= 3 || newSettings.numberOfQuestions >= 50) {\r\n            setError({\r\n                ...error,\r\n                questionNumbers: String(\"Number of Questions must be between 3 to 50\"),\r\n            })\r\n        } else {\r\n            setRequest(true);\r\n        }\r\n        \r\n    }\r\n\r\n    // filtering out the specific category\r\n    let userCategory = categories.filter((category) => {\r\n        return category.id === newSettings.category\r\n    });\r\n\r\n    // console.log(userCategory[0].name, \"5687/987\");\r\n\r\n    // setting user information state\r\n    const userInfo: SettingsTypes = {\r\n        UserName: newSettings.UserName,\r\n        numberOfQuestions: newSettings.numberOfQuestions,\r\n        difficulty: newSettings.difficulty,\r\n        category: newSettings.category,\r\n        categoryName: userCategory[0].name,\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.root}>\r\n                <form className={classes.form} onSubmit={submitHandler}>\r\n                    <Box py={3} px={4}>\r\n                        <div className={classes.settingHeader}>\r\n                            <Box py={2} px={1}>\r\n                                <Typography variant=\"h4\" align=\"center\">\r\n                                    Settings\r\n                        </Typography>\r\n                            </Box>\r\n                        </div>\r\n                        <TextField\r\n                            error={error.userName === \"\" ? false : true}\r\n                            helperText={error.userName === \"\" ? \"\" : error.userName}\r\n                            id=\"standard-basic\"\r\n                            label=\"Your Name\"\r\n                            type=\"text\"\r\n                            value={\r\n                                newSettings.UserName\r\n                            }\r\n                            onChange={(e) => {\r\n                                setNewSettings({\r\n                                    ...newSettings,\r\n                                    UserName: String(e.target.value),\r\n                                });\r\n                                setError({\r\n                                    ...error,\r\n                                    userName: \"\",\r\n                                });\r\n                            }}\r\n                            className={classes.inputFields}\r\n                        />\r\n                        <TextField\r\n                            error={error.questionNumbers === \"\" ? false : true}\r\n                            helperText={error.questionNumbers === \"\" ? \"\" : error.questionNumbers}\r\n                            id=\"standard-basic\"\r\n                            label=\"Select Number of Questions\"\r\n                            type=\"number\"\r\n                            value={\r\n                                newSettings.numberOfQuestions === 0 ? \"\" : newSettings.numberOfQuestions\r\n                            }\r\n                            onChange={(e) => {\r\n                                setNewSettings({\r\n                                    ...newSettings,\r\n                                    numberOfQuestions: Number(e.target.value),\r\n                                });\r\n                                setError({\r\n                                    ...error,\r\n                                    questionNumbers: \"\",\r\n                                });\r\n                            }}\r\n                            className={classes.inputFields}\r\n                        />\r\n                        <FormControl className={classes.inputFields}>\r\n                            <InputLabel htmlFor=\"grouped-native-select\">\r\n                                Select Difficulty\r\n                            </InputLabel>\r\n                            <Select native id=\"grouped-native-select\" onChange={(e) => {\r\n                                setNewSettings({ ...newSettings, difficulty: String(e.target.value) })\r\n                            }}>\r\n                                <option value={Difficulty.Easy}>Easy</option>\r\n                                <option value={Difficulty.Medium}>Medium</option>\r\n                                <option value={Difficulty.Hard}>Hard</option>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className={classes.inputFields}>\r\n                            <InputLabel htmlFor=\"grouped-native-select\">\r\n                                Select Category\r\n                            </InputLabel>\r\n                            <NativeSelect id=\"grouped-native-select\" defaultValue=\"\"\r\n                                onChange={(e) => {\r\n                                    setNewSettings({ ...newSettings, category: Number(e.target.value) })\r\n                                }}>\r\n                                {categories.map((category: CategoriesTpes) => (\r\n                                    <option key={category.id} value={category.id}>\r\n                                        {category.name}\r\n                                    </option>\r\n                                ))}\r\n                            </NativeSelect>\r\n                        </FormControl>\r\n                        <Box pt={4} pb={1}>\r\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                                Start Quiz\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n"]},"metadata":{},"sourceType":"module"}